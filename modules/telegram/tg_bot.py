import sys
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ParseMode, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
import asyncio

sys.path.append(os.path.join(os.path.dirname(__file__), 'modules'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'modules', 'database'))

import settings
from SqlCode import dbmanager, db

bot = Bot(token=settings.tg_token)
dp = Dispatcher(bot)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /safe
@dp.message_handler(commands=['safe'])
async def safe(message: types.Message):
    tg_id = message.from_user.id
    safes = dbmanager.get_safes_by_owner(db, tg_id)
    
    if not safes:
        await message.reply("–ù–µ—Ç —Å–µ–π—Ñ–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    keyboard = InlineKeyboardMarkup(row_width=1)
    for safe_id, safe_name in safes:
        keyboard.add(InlineKeyboardButton(text=safe_name, callback_data=f'safe_{safe_id}'))
    
    await bot.send_message(message.from_user.id, "üóÑ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–π—Ñ: üóÑ", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('safe_'))
async def process_callback_button(callback_query: types.CallbackQuery):
    safeid = int(callback_query.data.split('_')[1])
    string = dbmanager.get_safe_name(db, safeid)
    settings.CurrentSafe[callback_query.message.chat.id] = safeid

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data=f'safeaction_info'))
    keyboard.add(InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f'safeaction_setname'))
    keyboard.add(InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data=f'safeaction_add'))
    keyboard.add(InlineKeyboardButton(text="–°–Ω—è—Ç—å", callback_data=f'safeaction_take'))

    await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ –∫–æ–ø–∏–ª–∫—É <b>¬´ {string} ¬ª</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", parse_mode=types.ParseMode.HTML, reply_markup=keyboard)
    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('safeaction_'))
async def process_callback_button(callback_query: types.CallbackQuery):
    button_name = callback_query.data
    await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, reply_markup=None)
    await bot.answer_callback_query(callback_query.id)

    if button_name == "safeaction_info":
        string = await settings.base_utils.safe_information_str(settings.CurrentSafe[callback_query.message.chat.id])
        await bot.send_message(callback_query.from_user.id, string, parse_mode=types.ParseMode.HTML)
        return 1

    elif button_name == "safeaction_add":
        await bot.send_message(callback_query.from_user.id, "üí∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∂–µ–ª–∞–µ—Ç–µ <b>–ø–æ–ø–æ–ª–Ω–∏—Ç—å</b> —Å–≤–æ—é –∫–æ–ø–∏–ª–∫—É: üí∏", parse_mode=types.ParseMode.HTML)
        settings.CurrentAction[callback_query.message.chat.id] = button_name
        return 1

    elif button_name == "safeaction_take":
        await bot.send_message(callback_query.from_user.id, "üí∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∂–µ–ª–∞–µ—Ç–µ <b>—Å–Ω—è—Ç—å</b> —Å–æ —Å–≤–æ–µ–π –∫–æ–ø–∏–ª–∫–∏: üí∏", parse_mode=types.ParseMode.HTML)
        settings.CurrentAction[callback_query.message.chat.id] = button_name
        return 1

    elif button_name == "safeaction_setname":
        await bot.send_message(callback_query.from_user.id, "üóÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> —Å–≤–æ–µ–π –∫–æ–ø–∏–ª–∫–∏: üóÑ", parse_mode=types.ParseMode.HTML)
        settings.CurrentAction[callback_query.message.chat.id] = button_name
        return 1

    else:
        await bot.send_message(callback_query.from_user.id, f"Unknown button: <b>{button_name}</b>", parse_mode=types.ParseMode.HTML)

@dp.message_handler()
async def playertext(message: types.Message):
    if message.chat.id in settings.CurrentAction and settings.CurrentAction[message.chat.id] == "safeaction_add":
        if not message.text.isdigit():
            await message.reply("–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
            return

        summa = int(message.text)
        settings.CurrentAction[message.chat.id] = ""
        string = await settings.base_utils.add_cash_to_safe(settings.CurrentSafe[message.chat.id], summa)
        await bot.send_message(message.from_user.id, string, parse_mode=types.ParseMode.HTML)
        return 1

    elif message.chat.id in settings.CurrentAction and settings.CurrentAction[message.chat.id] == "safeaction_take":
        if not message.text.isdigit():
            await message.reply("–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
            return

        summa = int(message.text)
        settings.CurrentAction[message.chat.id] = ""
        string = await settings.base_utils.take_cash_from_safe(settings.CurrentSafe[message.chat.id], summa)
        await bot.send_message(message.from_user.id, string, parse_mode=types.ParseMode.HTML)
        return 1
    
    elif message.chat.id in settings.CurrentAction and settings.CurrentAction[message.chat.id] == "safeaction_setname":
        name = message.text
        if len(name) < 3 or len (name) > 32:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç 3 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤!")
            return

        settings.CurrentAction[message.chat.id] = ""
        string = await settings.base_utils.set_safe_name(settings.CurrentSafe[message.chat.id], name)
        await bot.send_message(message.from_user.id, string, parse_mode=types.ParseMode.HTML)
        return 1

async def start():
    await dp.start_polling()